
Resources:
  notesTableV3:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: notesV3-${self:provider.stage}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: notesId
          AttributeType: S
      KeySchema:
        - AttributeName: notesId
          KeyType: HASH

  #cognito user pool
  cognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyNotesUP-${self:provider.stage}

  #create user pool web client
  cognitoUserPoolWebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref cognitoUserPool
      ClientName: web
      AllowedOAuthFlows: 
        - implicit
      CallbackURLs:
        - http://localhost:3000 
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - phone
        - email
        - profile
        - openid
      SupportedIdentityProviders:
        - COGNITO

  #cognito user pool domain
  cognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref cognitoUserPool
      Domain: mynotesark-${self:provider.stage}

  #Application Parameters
  userPoolArnParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /notes/${self:provider.stage}/userPoolArn
      Type: String
      Value: !GetAtt cognitoUserPool.Arn