# service: notes-api-second
# frameworkVersion: '2'
# provider:
#   name: aws
#   runtime: nodejs16.x
#   lambdaHashingVersion: 20201221
#   stage: dev
#   region: us-east-1
# functions:
#   createNote:
#     handler: handler.createNote
#     environment:
#       NOTES_TABLE_NAME: !Ref notesTable
#       AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
#     iamRoleStatements:
#       - Effect: Allow
#         Action:
#           - dynamodb:PutItem
#         Resource: !GetAtt notesTable.Arn
#     events:
#       - http:
#           method: post
#           path: notes
#   updateNote:
#     handler: handler.updateNote
#     environment:
#       NOTES_TABLE_NAME: !Ref notesTable
#       AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
#     iamRoleStatements:
#       - Effect: Allow
#         Action:
#           - dynamodb:UpdateItem
#         Resource: !GetAtt notesTable.Arn
#     events:
#       - http:
#           method: put
#           path: notes/{id}
#   deleteNote:
#     handler: handler.deleteNote
#     environment:
#       NOTES_TABLE_NAME: !Ref notesTable
#       AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
#     iamRoleStatements:
#       - Effect: Allow
#         Action:
#           - dynamodb:DeleteItem
#         Resource: !GetAtt notesTable.Arn
#     events:
#       - http:
#           method: delete
#           path: notes/{id}
#   getAllNotes:
#     handler: handler.getAllNotes
#     environment:
#       NOTES_TABLE_NAME: !Ref notesTable
#       AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
#     iamRoleStatements:
#       - Effect: Allow
#         Action:
#           - dynamodb:Scan
#         Resource: !GetAtt notesTable.Arn
#     events:
#       - http:
#           method: get
#           path: notes                         

# plugins:
#   - serverless-iam-roles-per-function
# # you can add CloudFormation resource templates here
# resources:
#  Resources: 
#    notesTable:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: notes
#        BillingMode: PAY_PER_REQUEST
#        AttributeDefinitions:
#          - AttributeName: notesId
#            AttributeType: S
#        KeySchema:
#          - AttributeName: notesId
#            KeyType: HASH
 
#npm uninstall -g serverless
#npm i -g serverless@3 
#npm uninstall aws-sdk??? may not need to, but jinc
service: notes-api-version3
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs18.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: us-east-1
functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient
  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTableV3
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTableV3.Arn
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer
  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTableV3
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTableV3.Arn
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer
  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTableV3
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTableV3.Arn
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer
  getAllNotes:
    handler: handler.getAllNotes
    environment:
      NOTES_TABLE_NAME: !Ref notesTableV3
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notesTableV3.Arn
    events:
      - http:
          method: get
          path: notes 
          authorizer:
            name: userpool_authorizer
            type: COGNITO_USER_POOLS
            arn:  !GetAtt cognitoUserPool.Arn
plugins:
  - serverless-iam-roles-per-function
# you can add CloudFormation resource templates here
resources:
    ${file(resources.yaml)}

   